<%
/*
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 *
 */
//add login validator for pages
include('/controllers/login/validator.jag');
include('/controllers/menu/menu_generator.jag');

var log = new Log("apacheStratos.users");
var error = [];
var caramel = require('caramel'),
        util = require('/controllers/rest/rest_calls.jag'),
        uriMatcher = new URIMatcher(request.getRequestURI()),
        elements = uriMatcher.match('/{context}/users/{formtype}/'),
        context = caramel.configs().context,
        menuJson = require('/controllers/menu/menu.json'),
        userPermissions = session.get('PERMISSIONS'),
        listData,
        isForm = false;

if (!elements) {
    elements = uriMatcher.match('/{context}/users/{formtype}/{action}/');
    isForm = true;
    if(elements.action == 'new'){
        try {
            var formData = require('controllers/forms/schema/users/' + elements.formtype + '.json'),
                formDataRaw = require('controllers/forms/default/users/' + elements.formtype + '.json'),
                formTitle = formData.title;
        }catch (e) {
            log.error(e.message);
            error.push({"errorMessage": e.message});
        }
    }
}

//create left menu
var leftMenu = menuGenerator(context, menuJson.menu, userPermissions);



if (elements.formtype == 'users') {
    formTitle = 'User';
    listData = util.RESTCalls.getUserList();
    if (listData.status == 'error') {
        listData = null;
    }

} else if (elements.formtype == 'tenants') {
    formTitle = 'Tenant'
    listData = util.RESTCalls.getTenants();
    if (listData.status == 'error') {
        listData = null;
    }
}

//check user has permission to access endpoints
if (listData != null && listData.hasOwnProperty('Error')) {
    error.push(listData.Error);
}

caramel.render({
    breadcrumbPathLevelOne: 'users',
    breadcrumbPathLevelTwo: elements.formtype,
    isForm: isForm,
    formTitle: formTitle,
    formDataRaw: JSON.stringify(formDataRaw),
    formData: JSON.stringify(formData),
    formtype:elements.formtype,
    listData: listData,
    left_menu: leftMenu,
    error: error
});

%>