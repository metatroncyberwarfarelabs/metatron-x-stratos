<%
/*
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 *
 */
var log = new Log("apachestratos.configure_request"),
        util = require('/controllers/rest/rest_calls.jag'),
        formPayload = request.getParameter('formPayload'),
        formtype = request.getParameter('formtype'),
        formSubmit;

//add login validator for pages
include('/controllers/login/validator.jag');

try {
    switch (formtype) {
        case "network-partitions":
            formSubmit = util.RESTCalls.deployPartitionDefinition(formPayload);
            break;
        case "autoscaling-policies":
            formSubmit = util.RESTCalls.deployAutoscalePolicyDefinition(formPayload);
            break;
        case "deployment-policies":
            formSubmit = util.RESTCalls.deployDeploymentPolicyDefinition(formPayload);
            break;
        case "cartridges":
            formSubmit = util.RESTCalls.deployCartridgeDefinition(formPayload);
            break;
        case "cartridge-groups":
            formSubmit = util.RESTCalls.deployGroupDefinition(formPayload);
            break;
        case "kubernetes-clusters":
            formSubmit = util.RESTCalls.deployKubernetesClusterDefinition(formPayload);
            break;
        case "application-policies":
            formSubmit = util.RESTCalls.deployApplicationPolicyDefinition(formPayload);
            break;
        case "update-cartridge-groups":
            formSubmit = util.RESTCalls.updateGroupDefinition(formPayload);
            break;
        case "delete-cartridge-groups":
            formSubmit = util.RESTCalls.deleteGroup(formPayload);
            break;
        case "delete-application-policies":
            formSubmit = util.RESTCalls.deleteApplicationPolicyDefinition(formPayload);
            break;
        case "delete-network-partitions":
            formSubmit = util.RESTCalls.deletePartiions(formPayload);
            break;
        case "delete-cartridge":
            formSubmit = util.RESTCalls.deleteCartridgeDefinition(formPayload);
            break;
        case "delete-autoscaling-policy":
            formSubmit = util.RESTCalls.deleteAutoscalePolicyDefinition(formPayload);
            break;
        case "delete-deployment-policy":
            formSubmit = util.RESTCalls.deleteDeploymentPolicyDefinition(formPayload);
            break;
        case "update-kubernetes-clusters":
            formSubmit = util.RESTCalls.updateKubernetesClusterDefinition(formPayload);
            break;
        case "delete-kubernetes-clusters":
            formSubmit = util.RESTCalls.deleteKubernetesClusterDefinition(formPayload);
            break;
        case "update-network-partitions":
            formSubmit = util.RESTCalls.updatePartitionDefinition(formPayload);
            break;
        case "update-autoscaling-policies":
            formSubmit = util.RESTCalls.updateAutoscalePolicyDefinition(formPayload);
            break;
        case "update-deployment-policies":
            formSubmit = util.RESTCalls.updateDeploymentPolicyDefinition(formPayload);
            break;
        case "update-application-policies":
            formSubmit = util.RESTCalls.updateApplicationPolicyDefinition(formPayload);
            break;
        case "update-cartridges":
            formSubmit = util.RESTCalls.updateCartridgeDefinition(formPayload);
            break;
        default:
            session.put("deploy-status", { "message": "Sorry Endpoint Error", "status": "error" });

    }
} catch (e) {
    log.warn(e);
}


print(session.get("deploy-status"));
%>
