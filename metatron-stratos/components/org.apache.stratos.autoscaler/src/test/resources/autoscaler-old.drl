
/*
 * Licensed to the Apache Software Foundation (ASF) under one 
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY 
 * KIND, either express or implied.  See the License for the 
 * specific language governing permissions and limitations
 * under the License.
 */

package org.apache.stratos.autoscaler.rule;

import org.apache.stratos.messaging.domain.topology.Service;
import org.apache.stratos.messaging.domain.topology.Cluster;
import org.apache.stratos.autoscaler.context.AutoscalerContext;
import org.apache.stratos.autoscaler.ClusterContext;
import org.apache.stratos.autoscaler.util.AutoscalerConstants;
import org.apache.stratos.autoscaler.pojo.policy.PolicyManager;
import org.apache.stratos.autoscaler.pojo.policy.autoscale.AutoscalePolicy;
import org.apache.stratos.messaging.domain.policy.Partition;
import org.apache.stratos.messaging.domain.policy.NetworkPartition;
import org.apache.stratos.messaging.domain.policy.DeploymentPolicy;
import org.apache.stratos.autoscaler.pojo.policy.autoscale.RequestsInFlight;
import org.apache.stratos.autoscaler.pojo.policy.autoscale.LoadThresholds;
import org.apache.stratos.autoscaler.algorithm.AutoscaleAlgorithm;
import org.apache.stratos.autoscaler.algorithm.OneAfterAnother;
import org.apache.stratos.autoscaler.algorithm.RoundRobin;
import org.apache.stratos.messaging.message.receiver.topology.TopologyManager;
import org.apache.stratos.autoscaler.rule.AutoscalerRuleEvaluator;
import org.apache.commons.logging.Log;

global org.apache.stratos.autoscaler.pojo.policy.PolicyManager $manager;
global org.apache.stratos.autoscaler.context.AutoscalerContext $context;
global org.apache.commons.logging.Log log;
global org.apache.stratos.autoscaler.rule.AutoscalerRuleEvaluator $evaluator;
global org.apache.stratos.messaging.domain.topology.Topology $topology;


rule "Minimum Rule"
dialect "mvel"
       when
	       $service : Service () 
	       $cluster : Cluster () from  $service.getClusters()
	       $deploymentPolicy : DeploymentPolicy(id == $cluster.getDeploymentPolicyName() ) from $manager.getDeploymentPolicyList()
	       $partitionGroup : NetworkPartition () from  $deploymentPolicy.getNetworkPartitions()
	       $partition : Partition () from $partitionGroup.getPartitions()
	       $clusterContext : ClusterContext() from $context.getClusterContext($cluster.getClusterId())
	       eval($clusterContext.getMemberCount($partition.getId()) < $partition.getPartitionMembersMin())


       then
	       int memberCountToBeIncreased = 1 ;
	       if($evaluator.delegateSpawn($partition,$cluster.getClusterId(), memberCountToBeIncreased)){
		   $clusterContext.increaseMemberCountInPartitionBy($partition.getId(), memberCountToBeIncreased);
	       }
end

rule "Scaler-up Rule"
dialect "mvel"
	when
        $service : Service ()
        $cluster : Cluster () from  $service.getClusters()
        $autoScalingPolicy : AutoscalePolicy(id == $cluster.getAutoscalePolicyName() ) from $manager.getAutoscalePolicyList()
        $deploymentPolicy : DeploymentPolicy(id == $cluster.getDeploymentPolicyName() ) from $manager.getDeploymentPolicyList()
        $partitionGroup : NetworkPartition () from  $deploymentPolicy.getNetworkPartitions()
        $clusterContext : ClusterContext() from $context.getClusterContext($cluster.getClusterId())
        $loadThresholds :LoadThresholds() from  $autoScalingPolicy.getLoadThresholds()

        autoscaleAlgorithm : AutoscaleAlgorithm() from  $evaluator.getAutoscaleAlgorithm($partitionGroup.getPartitionAlgo())
        lbStatAverage : Float() from  $clusterContext.getAverageRequestsInFlight()
        lbStatGradient : Float() from  $clusterContext.getRequestsInFlightGradient()
        lbStatSecondDerivative : Float() from  $clusterContext.getRequestsInFlightSecondDerivative()
        averageLimit : Float() from  $loadThresholds.getRequestsInFlight().getAverage()
        gradientLimit : Float() from  $loadThresholds.getRequestsInFlight().getGradient()
        secondDerivative  : Float() from  $loadThresholds.getRequestsInFlight().getSecondDerivative()
        partition :  Partition() from autoscaleAlgorithm.getNextScaleUpPartition($partitionGroup, $cluster.getClusterId())
        eval (lbStatAverage > averageLimit && lbStatGradient > gradientLimit)
	then
        int numberOfInstancesToBeSpawned = (lbStatSecondDerivative > secondDerivative) ? 2 : 1; //  take from a config
        $evaluator.delegateSpawn(partition,$cluster.getClusterId(), numberOfInstancesToBeSpawned);
        $clusterContext.setRequestsInFlightGradient(gradientLimit);
        $clusterContext.setRequestsInFlightSecondDerivative(secondDerivative);
        $clusterContext.setAverageRequestsInFlight(averageLimit);
end

rule "Scaler-down Rule"
dialect "mvel"
	when
	    $service : Service ()
	    $cluster : Cluster () from  $service.getClusters()
	    $autoScalingPolicy : AutoscalePolicy(id == $cluster.getAutoscalePolicyName() ) from $manager.getAutoscalePolicyList()
        $deploymentPolicy : DeploymentPolicy(id == $cluster.getDeploymentPolicyName() ) from $manager.getDeploymentPolicyList()
        $partitionGroup : NetworkPartition () from  $deploymentPolicy.getNetworkPartitions()
	    $clusterContext : ClusterContext() from $context.getClusterContext($cluster.getClusterId())
        $loadThresholds :LoadThresholds() from  $autoScalingPolicy.getLoadThresholds()

        autoscaleAlgorithm : AutoscaleAlgorithm() from  $evaluator.getAutoscaleAlgorithm($partitionGroup.getPartitionAlgo())
        lbStatAverage : Float() from  $clusterContext.getAverageRequestsInFlight()
        lbStatGradient : Float() from  $clusterContext.getRequestsInFlightGradient()
        lbStatSecondDerivative : Float() from  $clusterContext.getRequestsInFlightSecondDerivative()
        averageLimit : Float() from  $loadThresholds.getRequestsInFlight().getAverage()
        gradientLimit : Float() from  $loadThresholds.getRequestsInFlight().getGradient()
        secondDerivative  : Float() from  $loadThresholds.getRequestsInFlight().getSecondDerivative()
        scaleDownSlowerMarginOfGradient : Float() from  $loadThresholds.getRequestsInFlight().getScaleDownMarginOfGradient()
        scaleDownSlowerMarginOfSecondDerivative : Float() from  $loadThresholds.getRequestsInFlight().getScaleDownMarginOfSecondDerivative()
        partition : Partition() from autoscaleAlgorithm.getNextScaleDownPartition($partitionGroup, $cluster.getClusterId())
        eval(lbStatAverage < averageLimit  && lbStatGradient < gradientLimit - scaleDownSlowerMarginOfSecondDerivative
                         && lbStatSecondDerivative < secondDerivative - scaleDownSlowerMarginOfSecondDerivative)
	then
        $evaluator.delegateTerminate(partition,$cluster.getClusterId());
        $clusterContext.setRequestsInFlightGradient(gradientLimit);
        $clusterContext.setRequestsInFlightSecondDerivative(secondDerivative);
        $clusterContext.setAverageRequestsInFlight(averageLimit);
end
