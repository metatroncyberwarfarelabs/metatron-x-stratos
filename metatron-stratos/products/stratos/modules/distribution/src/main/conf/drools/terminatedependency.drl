/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package org.apache.stratos.autoscaler.rule;

import org.apache.stratos.messaging.domain.topology.Cluster;
import org.apache.stratos.autoscaler.context.partition.ClusterLevelPartitionContext;

global org.apache.stratos.autoscaler.rule.RuleLog log;
global org.apache.stratos.autoscaler.rule.RuleTasksDelegator delegator;
global java.util.Map partitionCtxts;
global java.lang.String clusterId;
global java.lang.String lbRef;
global java.lang.String serviceId;

global org.apache.stratos.autoscaler.pojo.policy.autoscale.AutoscalePolicy autoscalePolicy;

rule "Terminate Dependency Rule"

dialect "mvel"
        when
            ctxt : ClusterLevelPartitionContext ()
            eval(log.debug("Running terminate dependency rule: [partition] " + ctxt.getPartitionId() + " [network-partition] " + ctxt.getNetworkPartitionId()))
            eval(log.debug("[terminate dependency] [network-partition] " + ctxt.getNetworkPartitionId() + " [partition] " + ctxt.getPartitionId() +" Member count: " + ctxt.getMemberStatsContexts().size()))
            eval(log.debug("Grouping ... in terminatedependency rule terminating all members " + ctxt.getAllMemberForTerminationCount()))
            eval(!ctxt.checkKillDependencies(serviceId, clusterId))
            eval(log.debug("[terminate dependency] [network-partition] " + ctxt.getNetworkPartitionId() + " [partition] " + ctxt.getPartitionId() + " successfully terminated members"))
 
            eval(log.debug("Grouping:terminatedependency:terminating all"))

        then
           delegator.delegateTerminateAll(clusterId);
end



